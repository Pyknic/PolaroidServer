package com.company.speedment.orm.test.polaroid.db0.polaroid.user;

import com.speedment.orm.config.model.Column;
import com.speedment.orm.config.model.Table;
import com.speedment.orm.core.manager.sql.SqlManager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import com.speedment.orm.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Long;
import java.lang.String;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'polaroid.db0.polaroid.user'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface UserManager extends SqlManager<Long, User, UserBuilder> {
    
    @Override
    default Long primaryKeyFor(User entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.polaroid.user");
    }
    
    @Override
    default Class<UserManager> getManagerClass() {
        return UserManager.class;
    }
    
    @Override
    default Class<User> getEntityClass() {
        return User.class;
    }
    
    @Override
    default Class<UserBuilder> getBuilderClass() {
        return UserBuilder.class;
    }
    
    @Override
    default Object get(User entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "mail" : return entity.getMail();
            case "password" : return entity.getPassword();
            case "first_name" : return entity.getFirstName();
            case "last_name" : return entity.getLastName();
            case "avatar" : return entity.getAvatar();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(UserBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Long) value); break;
            case "mail" : entity.setMail((String) value); break;
            case "password" : entity.setPassword((String) value); break;
            case "first_name" : entity.setFirstName((String) value); break;
            case "last_name" : entity.setLastName((String) value); break;
            case "avatar" : entity.setAvatar((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static UserManager get() {
        return Platform.get().get(ManagerComponent.class).manager(UserManager.class);
    }
}