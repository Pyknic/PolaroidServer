package com.company.speedment.orm.test.polaroid.db0.polaroid.link;

import com.speedment.orm.config.model.Column;
import com.speedment.orm.config.model.Table;
import com.speedment.orm.core.manager.SqlManager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import com.speedment.orm.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'polaroid.db0.polaroid.link'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface LinkManager extends SqlManager<List<Long>, Link, LinkBuilder> {
    
    @Override
    default List<Long> primaryKeyFor(Link entity) {
        return Arrays.asList(entity.getFollower(), entity.getFollows());
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.polaroid.link");
    }
    
    @Override
    default Class<LinkManager> getManagerClass() {
        return LinkManager.class;
    }
    
    @Override
    default Class<Link> getEntityClass() {
        return Link.class;
    }
    
    @Override
    default Class<LinkBuilder> getBuilderClass() {
        return LinkBuilder.class;
    }
    
    @Override
    default Object get(Link entity, Column column) {
        switch (column.getName()) {
            case "follower" : return entity.getFollower();
            case "follows" : return entity.getFollows();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static LinkManager get() {
        return (LinkManager) Platform.get().get(ManagerComponent.class).manager(LinkManager.class);
    }
}