package com.company.speedment.orm.test.polaroid.db0.polaroid.follow.impl;

import com.company.speedment.orm.test.polaroid.db0.polaroid.follow.Follow;
import com.company.speedment.orm.test.polaroid.db0.polaroid.follow.FollowBuilder;
import com.company.speedment.orm.test.polaroid.db0.polaroid.follow.FollowManager;
import com.speedment.orm.core.manager.AbstractSqlManager;
import java.lang.RuntimeException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in the Table 'polaroid.db0.polaroid.follow'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public class FollowManagerImpl extends AbstractSqlManager<java.util.List<?>, Follow, FollowBuilder> implements FollowManager {
    
    public FollowManagerImpl() {
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public FollowBuilder builder() {
        return new FollowImpl();
    }
    
    @Override
    public FollowBuilder toBuilder(Follow prototype) {
        return new FollowImpl(prototype);
    }
    
    @Override
    public Follow persist(Follow entity) {
        return entity;
    }
    
    @Override
    public Follow remove(Follow entity) {
        return entity;
    }
    
    protected Follow defaultReadEntity(ResultSet resultSet) {
        final FollowBuilder builder = builder();
        try {
            builder.setFollower(resultSet.getLong("follower"));
            builder.setFollows(resultSet.getString("follows"));
        }
        catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        }
        return builder;
    }
}