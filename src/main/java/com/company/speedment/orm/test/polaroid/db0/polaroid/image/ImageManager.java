package com.company.speedment.orm.test.polaroid.db0.polaroid.image;

import com.speedment.orm.config.model.Column;
import com.speedment.orm.config.model.Table;
import com.speedment.orm.core.manager.SqlManager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import com.speedment.orm.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'polaroid.db0.polaroid.image'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface ImageManager extends SqlManager<Long, Image, ImageBuilder> {
    
    @Override
    default Long primaryKeyFor(Image entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.polaroid.image");
    }
    
    @Override
    default Class<ImageManager> getManagerClass() {
        return ImageManager.class;
    }
    
    @Override
    default Class<Image> getEntityClass() {
        return Image.class;
    }
    
    @Override
    default Class<ImageBuilder> getBuilderClass() {
        return ImageBuilder.class;
    }
    
    @Override
    default Object get(Image entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "uploader" : return entity.getUploader();
            case "title" : return entity.getTitle();
            case "description" : return entity.getDescription();
            case "imgData" : return entity.getImgData();
            case "uploaded" : return entity.getUploaded();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static ImageManager get() {
        return (ImageManager) Platform.get().get(ManagerComponent.class).manager(ImageManager.class);
    }
}