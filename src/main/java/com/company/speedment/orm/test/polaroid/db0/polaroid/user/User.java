package com.company.speedment.orm.test.polaroid.db0.polaroid.user;

import com.company.speedment.orm.test.polaroid.db0.polaroid.image.Image;
import com.company.speedment.orm.test.polaroid.db0.polaroid.image.ImageManager;
import com.company.speedment.orm.test.polaroid.db0.polaroid.link.Link;
import com.company.speedment.orm.test.polaroid.db0.polaroid.link.LinkManager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table 'polaroid.db0.polaroid.user'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface User {
    
    Long getId();
    
    String getMail();
    
    String getPassword();
    
    String getFirstName();
    
    String getLastName();
    
    String getAvatar();
    
    default Stream<Image> imagesByUploader() {
        return Platform.get().get(ManagerComponent.class)
                .manager(ImageManager.class)
                .stream().filter(image -> Objects.equals(this.getId(), image.getUploader()));
    }
    
    default Stream<Link> linksByFollower() {
        return Platform.get().get(ManagerComponent.class)
                .manager(LinkManager.class)
                .stream().filter(link -> Objects.equals(this.getId(), link.getFollower()));
    }
    
    default Stream<Link> linksByFollows() {
        return Platform.get().get(ManagerComponent.class)
                .manager(LinkManager.class)
                .stream().filter(link -> Objects.equals(this.getId(), link.getFollows()));
    }
    
    default Stream<Image> images() {
        return imagesByUploader();
    }
    
    default Stream<Link> links() {
        return Stream.of(linksByFollower(), linksByFollows()).flatMap(Function.identity()).distinct();
    }
}